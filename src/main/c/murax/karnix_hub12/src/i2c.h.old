/*
	I2C driver for SpinalHDL 1.4.4 I2C controller

	Refactored by Ruslan Zalata <rz@fabmicro.ru>

	Based on SaxonSoc 

*/

#ifndef _I2C_H_
#define _I2C_H_

#define I2C_TX_DATA                 0x00
#define I2C_TX_ACK                  0x04
#define I2C_RX_DATA                 0x08
#define I2C_RX_ACK                  0x0C
#define I2C_INTERRUPT_ENABLE        0x20
#define I2C_INTERRUPT_FLAG          0x24
#define I2C_SAMPLING_CLOCK_DIVIDER  0x28
#define I2C_TIMEOUT                 0x2C
#define I2C_TSUDAT                  0x30
#define I2C_MASTER_STATUS           0x40
#define I2C_TLOW                    0x50
#define I2C_THIGH                   0x54
#define I2C_TBUF                    0x58
#define I2C_FILTERING_HIT           0x80
#define I2C_FILTERING_STATUS        0x84
#define I2C_FILTERING_CONFIG        0x88

typedef struct {
	volatile uint32_t tx_data; 		// 0x00
	volatile uint32_t tx_ack;		// 0x04
	volatile uint32_t rx_data;		// 0x08
	volatile uint32_t rx_ack;		// 0x0C
	volatile uint32_t res0[4];		// 0x10, 0x14, 0x18, 0x1C
	volatile uint32_t interrupt_enable;	// 0x20
	volatile uint32_t interrupt_flag;	// 0x24
	volatile uint32_t sampling_clock_div;	// 0x28
	volatile uint32_t timeout;		// 0x2C
	volatile uint32_t tsu_dat;		// 0x30
	volatile uint32_t res1[3];		// 0x34, 0x38, 0x3C
	volatile uint32_t master_status;		// 0x40
	volatile uint32_t res2[3];		// 0x44, 0x48, 0x4C
	volatile uint32_t tlow;			// 0x50
	volatile uint32_t thigh;			// 0x54
	volatile uint32_t tbuf;			// 0x58
	volatile uint32_t res3[9];		// 0x5C, 0x60, 0x64, 0x68, 0x6C, 0x70, 0x74, 0x78, 0x7C 
	volatile uint32_t filtering_hit;		// 0x80
	volatile uint32_t filtering_status;	// 0x84
	volatile uint32_t filtering_config[4];	// 0x88
} I2C_Reg;

typedef struct {
    //Master/Slave mode
    uint32_t sampling_clock_div; //Number of cycle - 1 between each SDA/SCL sample
    uint32_t timeout;              //Number of cycle - 1 after which an inactive frame is considered dropped.
    uint32_t tsu_dat;               //Number of cycle - 1 SCL should be keept low (clock stretching) after having feed the data to
                                   //  the SDA to ensure a correct propagation to other devices
    //Master mode
    uint32_t tlow;  //SCL low (cycle count -1)
    uint32_t thigh; //SCL high (cycle count -1)
    uint32_t tbuf;  //Minimum time between the Stop/Drop -> Start transition
} I2C_Config;

#define I2C_MODE_CPOL (1 << 0)
#define I2C_MODE_CPHA (1 << 1)

#define I2C_TX_VALUE (0xFF)
#define I2C_TX_VALID (1 << 8)
#define I2C_TX_ENABLE (1 << 9)
#define I2C_TX_REPEAT (1 << 10)
#define I2C_TX_DISABLE_ON_DATA_CONFLICT (1 << 11)

#define I2C_RX_VALUE (0xFF)
#define I2C_RX_VALID (1 << 8)
#define I2C_RX_LISTEN (1 << 9)

#define I2C_MASTER_BUSY (1 << 0)
#define I2C_MASTER_START (1 << 4)
#define I2C_MASTER_STOP (1 << 5)
#define I2C_MASTER_DROP (1 << 6)

#define I2C_FILTER_7_BITS (0)
#define I2C_FILTER_10_BITS (1 << 14)
#define I2C_FILTER_ENABLE (1 << 15)

#define I2C_INTERRUPT_TX_DATA (1 << 2)
#define I2C_INTERRUPT_TX_ACK (1 << 3)
#define I2C_INTERRUPT_DROP (1 << 7)

#define I2C_INTERRUPT_CLOCK_GEN_BUSY (1 << 16)
#define I2C_INTERRUPT_FILTER (1 << 17)

static void i2c_applyConfig(I2C_Reg* reg, I2C_Config *config) {
	reg->sampling_clock_div = config->sampling_clock_div;
	reg->timeout = config->timeout;
	reg->tsu_dat = config->tsu_dat;
	reg->tlow = config->tlow;
	reg->thigh = config->thigh;
	reg->tbuf = config->tbuf;
}

static inline void i2c_filterEnable(I2C_Reg* reg, uint32_t filterId, uint32_t config) {
	reg->filtering_config[filterId] = config;
}


static inline void i2c_masterStart(I2C_Reg* reg) {
	reg->master_status = I2C_MASTER_START;
}


static inline int i2c_masterBusy(I2C_Reg* reg) {
	return ((reg->master_status & I2C_MASTER_BUSY) != 0);
}


static void i2c_masterStartBlocking(I2C_Reg* reg) {
	i2c_masterStart(reg);
	while(!i2c_masterBusy(reg));
}


static inline void i2c_masterStop(I2C_Reg* reg) {
	reg->master_status = I2C_MASTER_STOP;
}


static void i2c_masterStopWait(I2C_Reg* reg) {
	while(i2c_masterBusy(reg));
}


static inline void i2c_masterDrop(I2C_Reg* reg) {
	reg->master_status = I2C_MASTER_DROP;
}


static void i2c_masterStopBlocking(I2C_Reg* reg) {
	i2c_masterStop(reg);
	i2c_masterStopWait(reg);
}


static inline void i2c_listenAck(I2C_Reg* reg) {
	reg->rx_ack = I2C_RX_LISTEN;
}


static inline void i2c_txByte(I2C_Reg* reg, uint8_t byte) {
	reg->tx_data = byte | I2C_TX_VALID | I2C_TX_ENABLE | I2C_TX_DISABLE_ON_DATA_CONFLICT;
}


static inline void i2c_txAck(I2C_Reg* reg) {
	reg->tx_ack = I2C_TX_VALID | I2C_TX_ENABLE;
}


static inline void i2c_txNack(I2C_Reg* reg) {
	reg->tx_ack = 1 | I2C_TX_VALID | I2C_TX_ENABLE;
}


static void i2c_txAckWait(I2C_Reg* reg) {
	while(reg->tx_ack & I2C_TX_VALID);
}


static void i2c_txAckBlocking(I2C_Reg* reg) {
	i2c_txAck(reg);
	i2c_txAckWait(reg);
}


static void i2c_txNackBlocking(I2C_Reg* reg) {
	i2c_txNack(reg);
	i2c_txAckWait(reg);
}


static uint32_t i2c_rxData(I2C_Reg* reg) {
	return reg->rx_data & I2C_RX_VALUE;
}


static int i2c_rxNack(I2C_Reg* reg) {
	return (reg->rx_ack & I2C_RX_VALUE) != 0;
}


static int i2c_rxAck(I2C_Reg* reg) {
	return (reg->rx_ack & I2C_RX_VALUE) == 0;
}


static void i2c_txByteRepeat(I2C_Reg* reg, uint8_t byte) {
	reg->tx_data = byte | I2C_TX_VALID | I2C_TX_ENABLE | I2C_TX_DISABLE_ON_DATA_CONFLICT | I2C_TX_REPEAT;
}


static void i2c_txNackRepeat(I2C_Reg* reg) {
	reg->tx_ack = 1 | I2C_TX_VALID | I2C_TX_ENABLE | I2C_TX_REPEAT;
}


static inline void i2c_setFilterConfig(I2C_Reg* reg, uint32_t filterId, uint32_t value) {
	reg->filtering_config[filterId] =  value;
}


static void i2c_enableInterrupt(I2C_Reg* reg, uint32_t value) {
	reg->interrupt_enable |= value;
}


static void i2c_disableInterrupt(I2C_Reg* reg, uint32_t value) {
	reg->interrupt_enable &= ~value;
} 


static inline void i2c_clearInterruptFlag(I2C_Reg* reg, uint32_t value) {
	reg->interrupt_flag = value;
}


static inline uint32_t i2c_getInterruptFlag(I2C_Reg* reg) {
	return reg->interrupt_flag;
}


static inline uint32_t i2c_getMasterStatus(I2C_Reg* reg) {
	return reg->master_status;
}


static inline uint32_t i2c_getFilteringHit(I2C_Reg* reg) {
	return reg->filtering_hit;
}


static inline uint32_t i2c_getFilteringStatus(I2C_Reg* reg) {
	return reg->filtering_status;
}


void i2c_init(I2C_Reg* reg);
void i2c_init_slave(I2C_Reg* reg, uint8_t slave_addr);
int i2c_read_regs(I2C_Reg* reg, uint8_t device_addr, uint8_t reg_id, uint8_t reg_nums, uint8_t* reg_val);


#endif // _I2C_H_

